package net.slipp.web;


import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import net.slipp.domain.User;
import net.slipp.domain.UserRepository;

@Controller
@RequestMapping(value = "/user")
public class UserController {
	private List<User> users = new ArrayList<User>();
	
	@Autowired
	private UserRepository userRepository;
	
	@GetMapping("/loginForm")
	public String loginForm(){
		return "user/login";
	}
	
	@PostMapping("/login")
	public String login(String userId,String password,HttpSession session) {
		User user = userRepository.findByUserId(userId);
		
		if(user==null) {
			return "redirect:/user/loginForm";
		}
		
		
		
		if(!user.matchPassword(password)) {
			return "redirect:/user/loginForm";
		}
		
		
		
		session.setAttribute(HttpSessionUtils.USER_SESSION_KEY,user);
		
		return "redirect:/";
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.removeAttribute(HttpSessionUtils.USER_SESSION_KEY);
		return "redirect:/";
	}
	
	@GetMapping("/form")
	public String form() {
		return "/user/form";
	}
	
	@PostMapping("")
	public String create(User user) {
		
		//users.add(user);
		userRepository.save(user); 
		return "redirect:/user";
	}
	
	@GetMapping("")
	public String list(Model model) {		
		model.addAttribute("users",userRepository.findAll());
		return "/user/list";
	}
	
	@GetMapping("/{id}/updateForm")
	public String updateForm(@PathVariable Long id,Model model,HttpSession session) {
		System.out.ln("aa");
		if(HttpSessionUtils.isLoginUser(session)) {
			return "/user/loginForm";
		}
		
		User tempUser = HttpSessionUtils.getUserFromSession(session);
		
		if(!tempUser.matchId(id)) {
			throw new IllegalStateException("shit");
		}
		
		
		model.addAttribute("users",userRepository.findById(id).get());
		
		return "/user/updateForm";
	}
	
	@PutMapping("/{id}")
	public String update(@PathVariable Long id, User newUser,HttpSession session) {

		if(HttpSessionUtils.isLoginUser(session)) {
			return "redirect:/uesrs/loginForm";
		}
		
		User sessionedUser = HttpSessionUtils.getUserFromSession(session);
		if(!sessionedUser.matchId(id)) {
			throw new IllegalStateException("shit");
		}
		
		
		User user = userRepository.findById(id).get();		
		user.update(newUser);
		userRepository.save(user);
		 
		return "redirect:/user";
	}
}
